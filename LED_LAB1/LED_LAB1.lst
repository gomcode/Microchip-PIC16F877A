CCS PCM C Compiler, Version 4.065, 26331               07-2-23 13:48

               Filename: LED_LAB1.lst

               ROM used: 107 words (1%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         15 (4%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   049
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.0
001C:  GOTO   01F
001D:  BTFSC  0C.0
001E:  GOTO   036
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   043
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   03C
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses HS,NOPROTECT,NOBROWNOUT,NOWDT,NOPUT,NOCPD,NOLVP,NOWRT 
.................... #use delay(clock=20000000) 
....................  
.................... #byte PORTD = 0x08 
.................... #bit TEST_PIN = PORTD.0 
.................... #byte TRISD = 0x88	// Input or Output 
....................  
.................... #byte TMR0 = 0x01 
.................... #byte INTCON = 0x0B 
.................... 	#bit GIE = INTCON.7  //Global Interrupt Enable bit [24Page] 
.................... 	#bit PEIE = INTCON.6  //Peripheral Interrupt Enable bit 
.................... 	#bit TMR0IE = INTCON.5 
.................... #byte PIE1 = 0x8C 
.................... 	#bit TMR1IE = PIE1.0 
....................  
.................... /* 
....................  
.................... void main(void){ 
.................... 	TRISD = 0x00;  // Output 
.................... 	PORTD = 0x00;	// clear 
....................  
.................... 	while(1){ 
....................  
.................... 		// LED Blink - 1Hz 
.................... 		PORTD = 0xff; 
.................... 		delay_ms(500); 
.................... 		PORTD = 0x00; 
.................... 		delay_ms(500); 
....................  
.................... 		// LED Blink - 2Hz 
.................... 		PORTD = 0xff; 
.................... 		delay_ms(0); 
.................... 		PORTD = 0x00; 
.................... 		delay_ms( 
.................... 0); 
....................  
.................... 		 
.................... 	}	 
.................... } 
....................  
.................... */ 
....................  
.................... int cnt =0; 
*
0054:  BCF    03.5
0055:  CLRF   28
.................... #int_timer0 
.................... void interrupt() { 
....................  
.................... 		clear_interrupt(int_timer0); 
*
003C:  BCF    0B.2
.................... 		TMR0 = 100;//set_timer0(100); 
003D:  MOVLW  64
003E:  MOVWF  01
....................  
.................... //		PORTD = 0xff; 
.................... //		delay_ms(100); 
.................... //		PORTD = 0x00; 
.................... //		delay_ms(100); 
....................  
....................  
.................... //	if(cnt++ == 100){ 
.................... //	//	output_toggle(PIN_D0); 
.................... //		PORTD = ~PORTD; //µÈ´Ù! 
.................... //		cnt = 0; 
.................... //	} 
.................... //	cnt++; 
.................... //	if(cnt == 1) output_high(PIN_D0); 
.................... //	else if(cnt == 50)output_low(PIN_D0); 
.................... //	else if(cnt >= 100) cnt = 0; 
.................... } 
....................  
003F:  BCF    0B.2
0040:  BCF    0A.3
0041:  BCF    0A.4
0042:  GOTO   023
.................... #int_timer1 
.................... void interrupt_1() { 
.................... 	clear_interrupt(int_timer1); 
0043:  BCF    0C.0
.................... //	set_timer1(100); 
.................... 	PORTD = ~PORTD; 
0044:  COMF   08,F
....................  
.................... } 
....................  
0045:  BCF    0C.0
0046:  BCF    0A.3
0047:  BCF    0A.4
0048:  GOTO   023
.................... void main(void) { 
0049:  CLRF   04
004A:  BCF    03.7
004B:  MOVLW  1F
004C:  ANDWF  03,F
004D:  BSF    03.5
004E:  BSF    1F.0
004F:  BSF    1F.1
0050:  BSF    1F.2
0051:  BCF    1F.3
0052:  MOVLW  07
0053:  MOVWF  1C
....................  
.................... 	TRISD = 0x00;  // Output 
*
0056:  BSF    03.5
0057:  CLRF   08
.................... 	PORTD = 0x00;	// clear 
0058:  BCF    03.5
0059:  CLRF   08
....................  
.................... //	GIE = 1; 
.................... //	PEIE = 1; 
....................  
.................... 	/* Timer 0 */ 
.................... 	setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); 
005A:  BSF    03.5
005B:  MOVF   01,W
005C:  ANDLW  C0
005D:  IORLW  07
005E:  MOVWF  01
.................... 	TMR0 = 100;//set_timer0(100); 
005F:  MOVLW  64
0060:  BCF    03.5
0061:  MOVWF  01
.................... 	TMR0IE = 1;//enable_interrupts(int_timer0); 
0062:  BSF    0B.5
.................... 	/* Timer 1 */ 
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
0063:  MOVLW  B5
0064:  MOVWF  10
.................... 	//TMR1 = 100;//set_timer0(100); 
.................... //	set_timer1(100); 
.................... 	TMR1IE = 1; 
0065:  BSF    03.5
0066:  BSF    0C.0
....................  
.................... 	GIE = 1;//enable_interrupts(global); 
0067:  BCF    03.5
0068:  BSF    0B.7
.................... 	 
.................... //	clear_interrupt(int_timer0); 
....................  
.................... 	while(1); 
0069:  GOTO   069
.................... } 
....................  
....................  
.................... /* 
.................... int count = 0; 
.................... # INT_RTCC 
.................... RTCC_ISR(){ 
.................... 	count++; 
.................... } 
....................  
.................... void main(void){ 
.................... 	 
.................... 	TRISD = 0x00; 
.................... 	PORTD = 0x00; 
....................  
.................... 	setup_counters(rtcc_internal, rtcc_div_256); 
.................... 	enable_interrupts(int_rtcc); 
.................... 	enable_interrupts(global); 
....................  
.................... 	while(1){ 
....................  
.................... 		if(count == 76){ 
.................... 			count = 0; 
....................  
.................... 			PORTD = 0xff; 
.................... 			delay_ms(200); 
.................... 			PORTD = 0x00; 
.................... 		} 
.................... 	}	 
.................... } 
.................... */ 
006A:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
